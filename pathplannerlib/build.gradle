plugins {
    id 'cpp'
    id 'java'
    id 'google-test'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
    id 'edu.wpi.first.NativeUtils' version '2024.2.0'
    id 'edu.wpi.first.GradleJni' version '1.0.0'
    id 'edu.wpi.first.GradleVsCode' version '1.3.0'
    id 'com.diffplug.spotless' version '6.11.0'
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}
if (project.hasProperty('releaseMode')) {
    wpilibRepositories.addAllReleaseRepositories(project)
} else {
    wpilibRepositories.addAllDevelopmentRepositories(project)
}

// Apply C++ configuration
apply from: 'config.gradle'

// Apply Java configuration
dependencies {
    implementation 'edu.wpi.first.cscore:cscore-java:2024.+'
    implementation 'edu.wpi.first.cameraserver:cameraserver-java:2024.+'
    implementation 'edu.wpi.first.ntcore:ntcore-java:2024.+'
    implementation 'edu.wpi.first.wpilibj:wpilibj-java:2024.+'
    implementation 'edu.wpi.first.wpiutil:wpiutil-java:2024.+'
    implementation 'edu.wpi.first.wpimath:wpimath-java:2024.+'
    implementation 'edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:2024.+'
    implementation 'edu.wpi.first.wpiunits:wpiunits-java:2024.+'
    implementation 'edu.wpi.first.hal:hal-java:2024.+'
    implementation "org.ejml:ejml-simple:0.42"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-core:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.12.4"
    implementation 'edu.wpi.first.thirdparty.frc2023.opencv:opencv-java:4.6.0-2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

// Set up exports properly
nativeUtils {
    exportsConfigs {
        PathplannerLib {
            x86ExcludeSymbols = [
                '_CT??_R0?AV_System_error',
                '_CT??_R0?AVexception',
                '_CT??_R0?AVfailure',
                '_CT??_R0?AVruntime_error',
                '_CT??_R0?AVsystem_error',
                '_CTA5?AVfailure',
                '_TI5?AVfailure',
                '_CT??_R0?AVout_of_range',
                '_CTA3?AVout_of_range',
                '_TI3?AVout_of_range',
                '_CT??_R0?AVbad_cast'
            ]
            x64ExcludeSymbols = [
                '_CT??_R0?AV_System_error',
                '_CT??_R0?AVexception',
                '_CT??_R0?AVfailure',
                '_CT??_R0?AVruntime_error',
                '_CT??_R0?AVsystem_error',
                '_CTA5?AVfailure',
                '_TI5?AVfailure',
                '_CT??_R0?AVout_of_range',
                '_CTA3?AVout_of_range',
                '_TI3?AVout_of_range',
                '_CT??_R0?AVbad_cast'
            ]
        }
    }
}

model {
    components {
        PathplannerLib(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                    }
                }
            }
            nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
        }
    }
    testSuites {
        PathplannerLibTest {
            sources.cpp {
                source {
                    srcDir 'src/test/native/cpp'
                    include '**/*.cpp'
                }
            }

            nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared", "googletest_static")
        }
    }
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    cpp {
        target fileTree('.') {
            include '**/*.cpp', '**/*.h'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseCdt()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

javadoc {
    exclude 'org/json/simple/**'
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/', 'https://github.wpilib.org/allwpilib/docs/release/java/'
    }
}

apply from: 'publish.gradle'

wrapper {
    gradleVersion '8.3'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}
